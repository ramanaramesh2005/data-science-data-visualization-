pip install pandas numpy scikit-learn matplotlib seaborn joblib

# Upload the Dataset
from google.colab import files
uploaded = files.upload()

# import file
import pandas as pd                 
import numpy as np                   
import matplotlib.pyplot as plt     
import seaborn as sns               
from sklearn.model_selection import train_test_split   
from sklearn.preprocessing import StandardScaler, LabelEncoder  
from sklearn.ensemble import RandomForestClassifier    
from sklearn.metrics import classification_report, confusion_matrix, roc_auc_score, roc_curve  # Evaluation metrics
import joblib                      

# Load the dataset
data = pd.read_csv('/content/sample_churn_data_100rows.csv')

# Display first few rows to confirm
print(data.head())


## Check for Missing Values and Duplicates
# Check for missing values
missing_values = data.isnull().sum()
print("Missing values per column:\n", missing_values)
# Check for duplicate rows
duplicate_count = data.duplicated().sum()
print(f"\nNumber of duplicate rows: {duplicate_count}")
# Display duplicate rows if any
if duplicate_count > 0:
    print("\nDuplicate rows:")
    print(data[data.duplicated()])
    

## Visualize a Few Features
# Set the plot style
sns.set(style="whitegrid")
# Visualize the distribution of 'tenure' (how long customers stayed)
plt.figure(figsize=(8,5))
sns.histplot(data['tenure'], bins=30, kde=True)
plt.title('Distribution of Customer Tenure')
plt.xlabel('Tenure (months)')
plt.ylabel('Count')
plt.show()
# Visualize churn counts
plt.figure(figsize=(6,4))
sns.countplot(x='Churn', data=data)
plt.title('Churn Count')
plt.xlabel('Churn (0=No, 1=Yes)')
plt.ylabel('Number of Customers')
plt.show()
# Visualize churn rate by contract type (if available)
if 'Contract' in data.columns:
    plt.figure(figsize=(8,5))
    sns.countplot(x='Contract', hue='Churn', data=data)
    plt.title('Churn Rate by Contract Type')
    plt.xlabel('Contract Type')
    plt.ylabel('Count')
    plt.show()


## Identify Target and Features
    # Drop 'customerID' column if it exists, as it's not a predictive feature
X = data.drop(['customerID', 'Churn'], axis=1, errors='ignore')
# Target variable
y = data['Churn']
print(f"Features shape: {X.shape}")
print(f"Target shape: {y.shape}")
print("\nFeatures preview:")
print(X.head())
print("\nTarget preview:")
print(y.head())


## Convert Categorical Columns to Numerical
categorical_cols = data.select_dtypes(include=['object']).columns.tolist()
# Remove 'customerID' if present, since it's an ID
if 'customerID' in categorical_cols:
    categorical_cols.remove('customerID')
# Initialize LabelEncoder
le = LabelEncoder()
# Encode each categorical column
for col in categorical_cols:
    data[col] = le.fit_transform(data[col])
print("Categorical columns converted to numerical.")


## Target variable
y = data['Churn']
print(f"Features shape: {X.shape}")
print(f"Target shape: {y.shape}")
print("\nFeatures preview:")
print(X.head())
print("\nTarget preview:")
print(y.head())



##  Evaluation
# Extract true labels and predictions
y_test = data['y_test']
y_pred = data['y_pred']
# Confusion Matrix
cm = confusion_matrix(y_test, y_pred)
plt.figure(figsize=(6, 4))
sns.heatmap(cm, annot=True, fmt='d', cmap='Blues')
plt.title('Confusion Matrix')
plt.xlabel('Predicted')
plt.ylabel('Actual')
plt.show()
# Classification Report
print("Classification Report:")
print(classification_report(y_test, y_pred))

# ROC-AUC Score
roc_auc = roc_auc_score(y_test, y_pred)
print(f"ROC-AUC Score: {roc_auc:.4f}")

# ROC Curve
fpr, tpr, _ = roc_curve(y_test, y_pred)
plt.figure(figsize=(6, 4))
plt.plot(fpr, tpr, label=f'ROC curve (area = {roc_auc:.4f})')
plt.plot([0, 1], [0, 1], 'k--')
plt.xlabel('False Positive Rate')
plt.ylabel('True Positive Rate')
plt.title('Receiver Operating Characteristic (ROC) Curve')
plt.legend(loc='lower right')
plt.show()


## Convert to DataFrame and Encode
# Convert to DataFrame (if necessary)
# data = pd.DataFrame(data)
# Encode Categorical Columns
label_enc = LabelEncoder()
# Example: Encode 'gender' and 'grade_level' columns (if present)
categorical_columns = ['gender', 'grade_level']

for col in categorical_columns:
    if col in data.columns:
        data[col] = label_enc.fit_transform(data[col])

print("\nEncoded Data:")
print(data.head())


